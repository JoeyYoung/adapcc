# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import coordinator_pb2 as coordinator__pb2


class CoordinatorStub(object):
    """服务类，需要开实例用来通信
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.controller_fetch = channel.unary_unary(
                '/coordinator.Coordinator/controller_fetch',
                request_serializer=coordinator__pb2.cont_request.SerializeToString,
                response_deserializer=coordinator__pb2.cont_response.FromString,
                )
        self.hook_fetch = channel.unary_unary(
                '/coordinator.Coordinator/hook_fetch',
                request_serializer=coordinator__pb2.hook_request.SerializeToString,
                response_deserializer=coordinator__pb2.hook_response.FromString,
                )


class CoordinatorServicer(object):
    """服务类，需要开实例用来通信
    """

    def controller_fetch(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def hook_fetch(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CoordinatorServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'controller_fetch': grpc.unary_unary_rpc_method_handler(
                    servicer.controller_fetch,
                    request_deserializer=coordinator__pb2.cont_request.FromString,
                    response_serializer=coordinator__pb2.cont_response.SerializeToString,
            ),
            'hook_fetch': grpc.unary_unary_rpc_method_handler(
                    servicer.hook_fetch,
                    request_deserializer=coordinator__pb2.hook_request.FromString,
                    response_serializer=coordinator__pb2.hook_response.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'coordinator.Coordinator', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Coordinator(object):
    """服务类，需要开实例用来通信
    """

    @staticmethod
    def controller_fetch(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/coordinator.Coordinator/controller_fetch',
            coordinator__pb2.cont_request.SerializeToString,
            coordinator__pb2.cont_response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def hook_fetch(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/coordinator.Coordinator/hook_fetch',
            coordinator__pb2.hook_request.SerializeToString,
            coordinator__pb2.hook_response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
